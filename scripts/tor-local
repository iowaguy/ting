#!/usr/bin/env python3

import argparse
import fileinput
import os
import shutil
import subprocess
import urllib.request

import sys
from os.path import realpath, dirname

SCRIPT_DIR = dirname(realpath(__file__))

# This line is required so I can use the ting module
sys.path.append(SCRIPT_DIR + "/../")
from ting.utils import IPAddress, TorRelayType


CONFIG_TEMPLATE_PATH = "../configs/"
GUARD_CONFIG_FILE = "local-guardrc"
EXIT_CONFIG_FILE = "local-exitrc"
CLIENT_CONFIG_FILE = "local-clientrc"

CONFIG = {
    TorRelayType.GUARD: {
        "file": GUARD_CONFIG_FILE,
        "data_dir": "data/w",
    },
    TorRelayType.EXIT: {
        "file": EXIT_CONFIG_FILE,
        "data_dir": "data/z",
    },
    TorRelayType.CLIENT: {
        "file": CLIENT_CONFIG_FILE,
        "data_dir": "data/c",
    },
}


def get_public_ip() -> IPAddress:
    """Get the public IP of the local machine."""
    return urllib.request.urlopen("https://ident.me").read().decode("utf8")


def fill_out_template(filename: str) -> None:
    """Copy template and replace with correct parameters."""
    shutil.copyfile(CONFIG_TEMPLATE_PATH + filename + ".template", filename)

    # find/replace
    with fileinput.FileInput(filename, inplace=True) as file:
        for line in file:
            print(
                line.replace("$PWD", SCRIPT_DIR).replace(
                    "$MY_PUBLIC_IP", get_public_ip()
                ),
                end="",
            )


def start_node(relay_type: TorRelayType):
    """Start Tor relay."""
    # Create log directory
    os.makedirs("logs", exist_ok=True)

    os.makedirs(CONFIG[relay_type]["data_dir"], exist_ok=True)
    fill_out_template(CONFIG[relay_type]["file"])

    # Start tor, must be on path
    subprocess.run(["tor", "-f", CONFIG[relay_type]["file"]], check=True)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="tor-local",
        description="Run local tor relays for use with Ting.",
    )
    parser.add_argument(
        "--guard",
        "-w",
        help="Start local guard relay.",
        action="store_true",
    )
    parser.add_argument(
        "--exit",
        "-z",
        help="Start local exit relay.",
        action="store_true",
    )
    parser.add_argument(
        "--client",
        "-c",
        help="Start local Tor client.",
        action="store_true",
    )

    args = parser.parse_args()

    if args.guard:
        start_node(TorRelayType.GUARD)

    if args.exit:
        start_node(TorRelayType.EXIT)

    if args.client:
        start_node(TorRelayType.CLIENT)

    if not (args.guard or args.exit or args.client):
        raise ValueError("Must provider --guard, --exit, or --client flag.")
